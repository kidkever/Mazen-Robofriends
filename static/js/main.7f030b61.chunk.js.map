{"version":3,"sources":["reducers.js","components/Card.tsx","components/CardList.tsx","components/SearchBox.tsx","components/ErrorBoundary.js","components/MainPage.tsx","containers/App.js","actions.js","constants.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","isPending","robots","error","Card","id","name","email","className","src","alt","style","width","height","CardList","cardComponent","map","user","i","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","ErrorBoundary","props","state","hasError","info","this","setState","children","Component","MainPage","filterRobots","filter","robot","toLowerCase","includes","onRequestRobots","onSearchChange","App","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","users","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.7f030b61.chunk.js","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\",\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false,\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false,\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\ninterface CardStatelessProps {\r\n  name: string;\r\n  id: number;\r\n  email: string;\r\n}\r\n\r\nconst Card: React.FunctionComponent<CardStatelessProps> = ({\r\n  id,\r\n  name,\r\n  email,\r\n}: any) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img\r\n        src={`https://robohash.org/${id}?size=525x525`}\r\n        alt=\"robots\"\r\n        style={{ width: \"200px\", height: \"200px\" }}\r\n      />\r\n      <div>\r\n        <h2 className=\"mt2 mb1\">{name}</h2>\r\n        <p className=\"mt1 mb1\">{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\ninterface IRobot {\r\n  name: string;\r\n  id: number;\r\n  email: string;\r\n}\r\n\r\nconst CardList = ({ robots }: { robots: Array<IRobot> }) => {\r\n  const cardComponent = robots.map((user, i) => {\r\n    return (\r\n      <Card\r\n        key={i}\r\n        id={robots[i].id}\r\n        name={robots[i].name}\r\n        email={robots[i].email}\r\n      />\r\n    );\r\n  });\r\n  return <div>{cardComponent}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./SearchBox.css\";\r\n\r\ninterface ISearchBoxProps {\r\n  searchChange(event: React.SyntheticEvent<HTMLInputElement>): void;\r\n}\r\n\r\nconst SearchBox = ({ searchChange }: ISearchBoxProps) => {\r\n  return (\r\n    <div className=\"pa2 mt1 mb2\">\r\n      <input\r\n        aria-label=\"Search Robots\"\r\n        className=\"pa3 br-pill w6 ba b--green bg-lightest-blue\"\r\n        type=\"search\"\r\n        placeholder=\"Search Robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n// w-40-l w-50-ns\r\n","import React, { Component } from \"react\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false,\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1 className=\"tc\">Oooops. That is not good!</h1>;\r\n    } else {\r\n      return this.props.children;\r\n    }\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from \"react\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\nimport \"./MainPage.css\";\r\n\r\ninterface Props {\r\n  onRequestRobots: any;\r\n  robots: Array<IRobot>;\r\n  searchField: string;\r\n  isPending: boolean;\r\n  onSearchChange: any;\r\n}\r\n\r\ninterface IRobot {\r\n  name: string;\r\n  id: number;\r\n  email: string;\r\n}\r\n\r\nclass MainPage extends Component<Props> {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  filterRobots = (robots: Array<IRobot>) => {\r\n    return robots.filter((robot: any) => {\r\n      return robot.name\r\n        .toLowerCase()\r\n        .includes(this.props.searchField.toLowerCase());\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { onSearchChange, robots, isPending } = this.props;\r\n    if (isPending) {\r\n      return <h1 className=\"tc\">Loading</h1>;\r\n    } else {\r\n      return (\r\n        <div className=\"tc\">\r\n          <h1 className=\"f2 mb0\">RoboFriends</h1>\r\n          <SearchBox searchChange={onSearchChange} />\r\n          <ErrorBoundary>\r\n            <CardList robots={this.filterRobots(robots)} />\r\n          </ErrorBoundary>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default MainPage;\r\n","import React, { Component } from \"react\";\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport MainPage from \"../components/MainPage\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots()),\r\n  };\r\n};\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <MainPage {...this.props} />;\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED,\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = (text) => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text,\r\n});\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    .then((response) => {\r\n      return response.json();\r\n    })\r\n    .then((users) => {\r\n      dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: users });\r\n    })\r\n    .catch((error) =>\r\n      dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\n\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\r\nimport { searchRobots, requestRobots } from \"./reducers\";\r\nimport { createLogger } from \"redux-logger\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport \"./index.css\";\r\nimport App from \"./containers/App\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"tachyons\";\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(thunkMiddleware, logger)\r\n);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}